[{"content":"","date":"2023-09-07","id":0,"permalink":"/blog/example-post/","summary":"","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":1,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2023-09-07","id":2,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Guides"},{"content":"How can we package unikernels in the OCI image format?\nTo address this challenge, we created bima, a tool specifically designed for this purpose. bima follows a simplistic approach by creating a pseudo rootfs and storing the unikernel blob in a designated location, along with any additional files required for running the unikernel (such as a configuration file). Custom OCI annotations, intentionally extensible, are utilized by bima to furnish the runtime with crucial information on how to execute the unikernel. This information includes the storage location of the unikernel within the rootfs, the desired hypervisor type, the necessary command line parameters, and the location of any extra required files.\nCode: https://github.com/nubificus/bima Contact: gntouts at nubificus.co.uk dot co , cmainas at nubificus.co.uk dot co , ananos at nubificus.co.uk dot co ","date":"2023-11-10","id":3,"permalink":"/projects/bima/","summary":"How can we package unikernels in the OCI image format?\nTo address this challenge, we created bima, a tool specifically designed for this purpose.","tags":[],"title":"bima"},{"content":"FlexOS is a unikernel-based OS allowing users to easily specialize the safety and isolation strategy of an OS at compilation/deployment time, instead of design time. Depending on the configuration, the same FlexOS code can mimic a microkernel with multiple address-spaces, a single-address-space OS with Intel MPK compartments, or many other OS isolation approaches.\nWebsite: https://project-flexos.github.io/ Code: https://github.com/project-flexos/unikraft Contact: hugo.lefeuvre at manchester.ac.uk dot ac ","date":"2023-11-10","id":4,"permalink":"/projects/flexos/","summary":"FlexOS is a unikernel-based OS allowing users to easily specialize the safety and isolation strategy of an OS at compilation/deployment time, instead of design time.","tags":[],"title":"FlexOS"},{"content":"genezio is a platform for developers to write and host a serverless application. You are writing your backend logic in classes and design your frontend using your preferred programming language.\nBy calling genezio deploy, we are deploying your backend classes in a serverless infrastructure.\nTo make it easy to call your backend logic from the client, an SDK is generated. You can use it to remotely call the methods of your class in a very natural way.\nWebsite: https://genez.io/ Code: https://github.com/Genez-io Contact: https://discord.gg/uc9H5YKjXv ","date":"2023-11-10","id":5,"permalink":"/projects/genezio/","summary":"genezio is a platform for developers to write and host a serverless application. You are writing your backend logic in classes and design your frontend using your preferred programming language.","tags":[],"title":"Genezio"},{"content":"Hermit is Rust-based, lightweight unikernel. It targets a scalable and predictable runtime for high-performance and cloud computing.\nThe ownership model of Rust guarantees memory/thread-safety and enables us to eliminate many classes of bugs at compile-time. Consequently, the use of Rust for kernel development promises fewer vulnerabilities in comparison to common programming languages.\nThe kernel is able to run Rust applications, as well as C/C++/Go/Fortran applications.\nWebsite: http://hermit-os.org/ Code: https://github.com/hermit-os Contact: https://hermit.zulipchat.com/ ","date":"2023-11-10","id":6,"permalink":"/projects/hermit/","summary":"Hermit is Rust-based, lightweight unikernel. It targets a scalable and predictable runtime for high-performance and cloud computing.\nThe ownership model of Rust guarantees memory/thread-safety and enables us to eliminate many classes of bugs at compile-time.","tags":[],"title":"Hermit"},{"content":"HermiTux is a unikernel binary-compatible with Linux: it can run native Linux executables. It supports multiple compiled (C, C++, Fortran) and interpreted (Python, LUA) languages. It provides binary analysis and rewriting techniques to optimize system call latency and modularize a kernel in the presence of unmodified binaries. It supports statically and dynamically linked programs, different compilers and optimization levels. HermiTux also provides basic support for multithreading, debugging and profiling.\nWebsite: https://ssrg-vt.github.io/hermitux/ Code: https://github.com/ssrg-vt/hermitux Contact: pierre.olivier at manchester.ac.uk dot ac ","date":"2023-11-10","id":7,"permalink":"/projects/hermitux/","summary":"HermiTux is a unikernel binary-compatible with Linux: it can run native Linux executables. It supports multiple compiled (C, C++, Fortran) and interpreted (Python, LUA) languages.","tags":[],"title":"HermiTux"},{"content":"Loupe is a tool designed to help collect and analyze the system call usage of an application. The tool can tell you what system calls need to be implemented in a custom OS to run the analyzed application, and visualize these numbers in a variety of plots.\nWebsite: https://github.com/unikraft/loupe Code: https://github.com/unikraft/loupe Contact: pierre.olivier at manchester.ac.uk dot ac ","date":"2023-11-10","id":8,"permalink":"/projects/loupe/","summary":"Loupe is a tool designed to help collect and analyze the system call usage of an application. The tool can tell you what system calls need to be implemented in a custom OS to run the analyzed application, and visualize these numbers in a variety of plots.","tags":[],"title":"Loupe"},{"content":"MirageOS is a library operating system that constructs unikernels for secure, high-performance network applications across a variety of cloud computing and mobile platforms. Code can be developed on a normal OS such as Linux or macOS, and then compiled into a fully-standalone, specialised unikernel that runs under a Xen or KVM hypervisor. This lets your services run more efficiently, securely and with finer control than with a full conventional software stack.\nMirageOS applications take a few milliseconds to start-up instead of the few minutes that traditional OSes take. Binaries are self-contained: they do not need an additional OS to execute. Even then, the size of MirageOS binary is usually a few megabytes.\nMirageOS applications are written in OCaml, an industrial strength programming language supporting functional, imperative and object-oriented styles.\nWebsite: https://mirage.io/ Code: https://github.com/mirage Contact: https://lists.xenproject.org/cgi-bin/mailman/listinfo/mirageos-devel ","date":"2023-11-10","id":9,"permalink":"/projects/mirage/","summary":"MirageOS is a library operating system that constructs unikernels for secure, high-performance network applications across a variety of cloud computing and mobile platforms.","tags":[],"title":"MirageOS"},{"content":"OSv is an open-source unikernel designed to run a single unmodified Linux application securely as microVM on top of a hypervisor. This is contrast to traditional operating systems which were designed for a vast range of physical machines. OSv can execute precompiled Linux dynamically-linked binaries that use glibc, dynamically-linked binaries which use system calls directly instead of glibc (e.g., golang) as well as glibc functions, and finally statically linked and dynamically linked executables with full Linux glibc instead of built-in OSvâ€™ glibc. OSv guests can run on QEMU/KVM, Firecracker, Cloud Hypervisor, VMWare, VirtualBox, HyperKit and XEN (AWS Nitro support is coming soon).\nWebsite: https://osv.io/ Code: https://github.com/cloudius-systems/osv Contact: https://groups.google.com/g/osv-dev ","date":"2023-11-10","id":10,"permalink":"/projects/osv/","summary":"OSv is an open-source unikernel designed to run a single unmodified Linux application securely as microVM on top of a hypervisor.","tags":[],"title":"OSv"},{"content":"Toro is a simple kernel that provides a dedicated API to develop microservices. We propose two kinds of sockets to build microservices: blocking and non-blocking. Blocking sockets are good for intensive-IO microservices whereas non-blocking sockets are good for microservices that can serve a request without blocking. When a microservice executes in Toro, it runs alone in the system thus leveraging on the VM\u0026rsquo;s resources.\nToro is a set of libraries that compile within the user application, i.e., the microservice. The user can choose which components are included, .e.g, drivers, filesystems, networking, etc. This results in a binary that can run on top of modern hypervisors like KVM, Xen or VirtualBox. Once the kernel has been initialized, the microservice starts to execute. The microservice runs free from interference from other applications and without the need of users, password or remote login.\nWebsite: https://torokernel.io/ Code: https://github.com/torokernel Contact: https://groups.google.com/g/torokernel ","date":"2023-11-10","id":11,"permalink":"/projects/toro/","summary":"Toro is a simple kernel that provides a dedicated API to develop microservices. We propose two kinds of sockets to build microservices: blocking and non-blocking.","tags":[],"title":"Toro Kernel"},{"content":"Unikraft is a fast, secure and open source unikernel development kit. It powers the next-generation of cloud native applications by enabling you to radically customize and build custom OS/kernels, unlocking best-in-class performance, security primitives and efficiency savings.\nUnikraft aims for extreme specialization, with configurability at its core of its design. It is fully modular, with a constantly growing ecosystem with many popular open-source operating system and application libraries like musl and openssl available for use, allowing you to pick and choose exactly what you need for your target application.\nWith the Unikraft companion command-line client kraft, you can quickly and easily define, configure, build, and run unikernel applications. Get everything from OS library dependencies to pre-built binaries and more.\nUnikraft technology powers the KraftCloud platform.\nWebsite: https://unikraft.org/ Code: https://github.com/unikraft/ Contact: http://bit.ly/UnikraftDiscord ","date":"2023-11-10","id":12,"permalink":"/projects/unikraft/","summary":"Unikraft is a fast, secure and open source unikernel development kit. It powers the next-generation of cloud native applications by enabling you to radically customize and build custom OS/kernels, unlocking best-in-class performance, security primitives and efficiency savings.","tags":[],"title":"Unikraft"},{"content":"To bridge the gap between unikernels and traditional containerized environments, enabling seamless integration with cloud-native architectures, we introduce urunc. Designed to fully leverage the container semantics and benefit from the OCI tools and methodology, urunc aims to become \u0026ldquo;runc for unikernels\u0026rdquo;, while offering compatibility with the Container Runtime Interface (CRI). By relying on underlying hypervisors, urunc launches unikernels provided by OCI-compatible images, allowing developers and administrators to package, deliver, deploy, and manage unikernels using familiar cloud-native practices.\nCode: https://github.com/nubificus/urunc Contact: gntouts at nubificus.co.uk dot co , cmainas at nubificus.co.uk dot co , ananos at nubificus.co.uk dot co ","date":"2023-11-10","id":13,"permalink":"/projects/urunc/","summary":"To bridge the gap between unikernels and traditional containerized environments, enabling seamless integration with cloud-native architectures, we introduce urunc. Designed to fully leverage the container semantics and benefit from the OCI tools and methodology, urunc aims to become \u0026ldquo;runc for unikernels\u0026rdquo;, while offering compatibility with the Container Runtime Interface (CRI).","tags":[],"title":"urunc"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the DiÃ¡taxis framework ","date":"2023-09-07","id":14,"permalink":"/docs/guides/example-guide-111/","summary":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.","tags":[],"title":"Example Guide 111"},{"content":"","date":"2023-09-07","id":15,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the DiÃ¡taxis framework ","date":"2023-09-07","id":16,"permalink":"/docs/reference/example-reference/","summary":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.","tags":[],"title":"Example Reference"},{"content":"","date":"2023-11-10","id":17,"permalink":"/docs/","summary":"","tags":[],"title":"Projects"},{"content":"","date":"2023-11-10","id":18,"permalink":"/projects/","summary":"","tags":[],"title":"Projects"},{"content":"","date":"2023-09-07","id":19,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":20,"permalink":"/","summary":"","tags":[],"title":"Unikernel Alliance"},{"content":"","date":"0001-01-01","id":21,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":22,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":23,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]